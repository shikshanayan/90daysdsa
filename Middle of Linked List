Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.

 

Example 1:


Example 1:
Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.
Example 2:
Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.


1st approach

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode *ptr;
        ptr=head;
        int n=0;
        while(ptr!=NULL){
            n++;
            ptr=ptr->next;
        }
        ptr=head;
        for(int i=0;i<n/2;i++){
            ptr=ptr->next;
        }
        return ptr;
    }
    
};


2nd approach

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head;

        while(fast && fast->next){
            fast = fast->next->next;
            slow = slow->next;
        }
        return slow;
    }
};
